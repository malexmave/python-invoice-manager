from data import connect, structure
import re


class InvalidDatabaseStructureException(Exception):
	"""InvalidDatabaseStructureException

	Thrown if the structure of the database is invalid.
	"""
	def __init__(self, msg=""):
		self.msg=msg

	def __repr__(self):
		return repr(self.msg)

	def __str__(self):
		return str(self.msg)


def checkConformity(dbfile):
	"""Check the conformity of a SQLite database.

	This function will check if a provided SQLite database conforms to a the
	Database structure generated by structure.STRUCT.

	Raises:
	InvalidDatabaseStructureException -- If the database structure is incorrect
	"""
	# TODO: Modify to conform to new DB structure definition
	# Check database tables
	cursor, conn = connect.getConnection(dbfile)
	fkeypat = re.compile('REFERENCES (.*)\((.*)\) ON (UPDATE|DELETE) (.*) ' +
						 'ON (UPDATE|DELETE) (.*)')
	for tbl_name in structure.STRUCT:
		cursor.execute("PRAGMA table_info(%s);" % tbl_name)
		res = cursor.fetchall()
		if res != []:
			# Table exists
			cursor.execute("PRAGMA foreign_key_list(%s);" % tbl_name)
			fkeys = cursor.fetchall()
			resdict = {}
			for element in res:
				resdict[element[1]] = {
					"type": element[2],
					"nullAllowed": True if element[3] == 0 else False
				}
			for element in fkeys:
				resdict[element[3]]["is_fkey"] = True
				resdict[element[3]]["UPDATE"] = element[5]
				resdict[element[3]]["DELETE"] = element[6]
				resdict[element[3]]["fkey_table"] = element[2]
				resdict[element[3]]["fkey_field"] = element[4]
			for field in structure.STRUCT[tbl_name]:
				try:
					if resdict[field]["type"] == \
					  structure.STRUCT[tbl_name][field][0]:
						# Field exists and has the correct type
						# Check for foreign keys
						if structure.STRUCT[tbl_name][field][2] != "":
							mobj = re.search(fkeypat, 
								             structure.STRUCT[tbl_name][field][2])
							assert resdict[field]["is_fkey"], "no foreign key"
							assert resdict[field]["fkey_table"] == \
							    	mobj.group(1), "incorrect table"
							assert resdict[field]["fkey_field"] == \
									mobj.group(2), "incorrect field"
							assert resdict[field][mobj.group(3)] == \
									mobj.group(4), "incorrect ON %s" % \
									mobj.group(3)
							assert resdict[field][mobj.group(5)] == \
									mobj.group(6), "incorrect ON %s" % \
									mobj.group(5)
					else:
						raise InvalidDatabaseStructureException(
							"Field %s in table %s has type %s (should be %s)"
							% (field, tbl_name, resdict[field]["type"],
							   structure.STRUCT[tbl_name][field][0]))
				except KeyError:
					raise InvalidDatabaseStructureException(
						"Field %s does not exist in table %s." \
						% (field, tbl_name))
				except AssertionError, e:
					raise InvalidDatabaseStructureException(
						"Incorrect foreign key on %s: %s."
						% (field, str(e)))
					
		else:
			raise InvalidDatabaseStructureException("Table '%s' does not exist." % tbl_name)


def setup(dbfile):
	"""Set up the sqlite database on first run.

	This function will set up the SQLite database during first run.
	It should not be run afterwards.

	Raises:
	sqlite3.OperationalError -- If the database already exists or syntax of
	    a SQL statement was incorrect.
	"""
	cursor, conn = connect.getConnection(dbfile)
	for key in structure.STRUCT:
		stmt = "CREATE TABLE %s(" % key
		for field in structure.STRUCT[key]:
			stmt += "%s %s %s %s, " % (field, structure.STRUCT[key][field][0],
				                       structure.STRUCT[key][field][1],
				                       structure.STRUCT[key][field][2])
		stmt = stmt[:-2] + ");"
		cursor.execute(stmt)
	conn.commit()

